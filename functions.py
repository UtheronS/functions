import numpy as np

# ----------------------------------------------------------------------------------------------------------------------

""" Напишите функцию для транспонирования матрицы """


# ----------------------------------------------------------------------------------------------------------------------

def matrix_transposition(matrix):
    # Узнаём размеры нашей обычной матрицы
    rows = len(matrix)
    columns = len(matrix[0])
    # Далее мы создаём пустую новую матрицу, состоящую из нулей
    matrix_transpose = [[0 for _ in range(rows)] for _ in range(columns)]

    for i in range(rows):
        for j in range(columns):
            # Создаём два вложенных цикла и меняем значения. То есть, если у вас есть матрица
            # размером MxN (M строк и N столбцов), то результат транспонирования будет матрица размером NxM,
            # где элемент, который находился в строке i и столбце j исходной матрицы, будет находиться в строке j
            # и столбце i транспонированной матрицы.
            matrix_transpose[j][i] = matrix[i][j]

    return matrix_transpose


matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
for row in matrix:
    for value in row:
        print(value, end=' ')
    print()

print('Сверху обычная матрица, снизу транспонированная')

transpose_matrix = matrix_transposition(matrix)

for row in transpose_matrix:
    for value in row:
        print(value, end=' ')
    print()

# ----------------------------------------------------------------------------------------------------------------------

""" Напишите функцию принимающую на вход только ключевые параметры и возвращающую словарь,
где ключ — хэш значения переданного аргумента, а значение — имя аргумента. 
Если ключ не хешируем, используйте его строковое представление. """


# ----------------------------------------------------------------------------------------------------------------------


def return_dict(**kwargs):
    argument_dict = {}

    for k, v in kwargs.items():
        if isinstance(v, (str, int, bool, frozenset, bytes, tuple)):
            hash_key = hash(v)
        else:
            hash_key = str(v)
        argument_dict[hash_key] = k

    return argument_dict


print(return_dict(a=123, b=True, c='Hello', d=[1, 2, 3]))
